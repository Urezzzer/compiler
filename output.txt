Lexeme: while  Token: KEYWORD
<Statement> -> <While-Loop>
<While-Loop> -> while (<conditional>) {<Statement>};
 Lexeme: (  Token: SEPARATOR
<Conditional> -> <Expression> <Conditional-Operator> <Expression>
<Expression> -> <Term> <Expression-Prime>
<Term> -> <Factor> <Term-Prime>
Lexeme: i  Token: IDENTIFIER
<Factor> -> <Identifier>
<Term-Prime> -> epsilon
<Expression-Prime> -> epsilon
Lexeme: <  Token: NOT_EXISTS
<Expression> -> <Term> <Expression-Prime>
<Term> -> <Factor> <Term-Prime>
Lexeme: 1000  Token: INTEGER
<Factor> -> <Integer>
<Term-Prime> -> epsilon
<Expression-Prime> -> epsilon
Lexeme: )  Token: SEPARATOR
Lexeme: {  Token: SEPARATOR
Lexeme: i  Token: IDENTIFIER
<Statement> -> <Assignment>
<Assignment> -> <Identifier> = <Expression>;
Lexeme: =  Token: OPERATOR
<Expression> -> <Term> <Expression-Prime>
<Term> -> <Factor> <Term-Prime>
Lexeme: '  Token: OPERATOR
<Factor> -> <String>
Lexeme: 0;  Token: STRING
Error: Missing closing string's separator at end of expression.
<Term-Prime> -> epsilon
<Expression-Prime> -> epsilon
Warning: Missing ';' at end of line.
Lexeme: d  Token: IDENTIFIER
<Statement> -> <Assignment>
<Assignment> -> <Identifier> = <Expression>;
Lexeme: =  Token: OPERATOR
<Expression> -> <Term> <Expression-Prime>
<Term> -> <Factor> <Term-Prime>
Lexeme: 5  Token: INTEGER
<Factor> -> <Integer>
<Term-Prime> -> epsilon
<Expression-Prime> -> epsilon
Lexeme: ;  Token: SEPARATOR
Lexeme: }  Token: SEPARATOR
Lexeme: ;  Token: SEPARATOR
Lexeme: $  Token: END_OF_FILE
