<Start> -> <Data-Type> <Identifier> (<Initialization>) {<Statement>} | epsilon

<Statement> -> <If-statement> | <For-loop> | <While-loop> | <Declaration> | <Assignment> | return <Expression>;

<Data-Type> -> int | boolean | float |  string | char | double | void

<Declaration> -> <Data-Type> <Instruction>
<Assignment> -> <Instruction> | <Identifier> (<Function-Parameters>);
<Instruction> -> <Identifier> = <Expression>;

<If-statement> -> if (<conditional>) {<Statement>} <Else>
<Else> -> else {<Statement>}; | ;

<Conditional> -> <Expression> <Conditional-Operator> <Expression>
<Conditional-Operator> -> "==" | "<=" | ">=" | "!=" | > | <

<For-loop> -> for (<Declaration>; <conditional>; <Identifier> = <Expression>) {<Statement>}
<While-loop> -> while (<conditional>) {<Statement>}

<Expression> -> <Term> <Expression-Prime>
<Expression-Prime> -> + <Term> <Expression-Prime> | - <Term> <Expression-Prime> | epsilon
<Term> -> <Factor> <Term-Prime>
<Term-Prime> -> * <Factor> <Term-Prime> | / <Factor> <Term-Prime> | epsilon
<Factor> -> <Boolean> | '<String>' | "<String>" | (<Expression>) | <Identifier> | <Integer> | <Float> | <Identifier>(<Function-Parameters>) | <Signed>
<Signed> -> <Sign>(<Expression>) | <Sign><Identifier> | <Sign><Integer> | <Sign><Float> | <Sign><Identifier> | <Sign>(<Function-Parameters>)
<Function-Parameters> -> <Expression> | <Expression>, <Function-Parameters> | epsilon
<Initialization> -> <Data-Type> <Identifier> | <Data-Type> <Identifier>, <Initialization> | epsilon

<Sign> -> + | -
<Separator> -> } | ) | ( | {

<Identifier> -> (Aa-Zz)(Aa-Zz0-9$)*
<Integer> -> (0-9)+
<Float> -> (0-9)+.(0-9)+
<Boolean> -> true | false
<String> -> ([special_symbols]Aa-Zz0-9$)+